// Chosen Order is a plugin for Chosen
// It allows you to handle the order of the selection
// Full source at https://github.com/tristanjahier/chosen-order
// Copyright (c) 2013 - Tristan Jahier, http://tristan-jahier.fr

// DISCLAIMER
// Chosen Order is not associated with Harvest in any way.
// Chosen is an original software by Patrick Filler for Harvest, http://getharvest.com
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// This file is generated by `grunt build`, do not edit it by hand.
(function() {
  var AbstractChosenOrder, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractChosenOrder = (function() {
    var ERRORS, forceSelection, getChosenUIContainer, insertAt, isChosenified, isValidMultipleSelectElement, option_selection;

    function AbstractChosenOrder() {}

    ERRORS = {
      invalid_select_element: "ChosenOrder::{{function}}: first argument must be a valid HTML Multiple Select element that has been Chosenified!",
      invalid_selection_array: "ChosenOrder::{{function}}: second argument must be an Array!",
      unreachable_chosen_container: "ChosenOrder::{{function}}: could not find the Chosen UI container! To solve the problem, try adding an \"id\" attribute to your <select> element."
    };

    insertAt = function(node, index, parent) {
      return parent.insertBefore(node, parent.children[index].nextSibling);
    };

    isValidMultipleSelectElement = function(element) {
      return element !== null && typeof element !== "undefined" && element.nodeName === "SELECT" && element.multiple;
    };

    getChosenUIContainer = function(select) {
      if (select.id !== "") {
        return document.getElementById(select.id.replace(/-/g, "_") + "_chosen");
      } else {
        return searchChosenUIContainer(select);
      }
    };

    isChosenified = function(select) {
      return getChosenUIContainer(select) != null;
    };

    forceSelection = function(selection) {
      var i, opt, options, _ref;
      options = this.children;
      i = 0;
      while (i < options.length) {
        opt = options[i];
        if (_ref = opt.getAttribute("value"), __indexOf.call(selection, _ref) >= 0) {
          opt.selected = true;
          opt.setAttribute("selected", "");
        } else {
          opt.selected = false;
          opt.removeAttribute("selected");
        }
        i++;
      }
      return triggerEvent(this, "chosen:updated");
    };

    option_selection = function(select) {
      var groups, optgroup_counter, option_counter, options;
      options = [];
      groups = select.getElementsByTagName("optgroup");
      optgroup_counter = 0;
      while (optgroup_counter < groups.length) {
        options.push(groups[optgroup_counter]);
        option_counter = 0;
        while (option_counter < groups[optgroup_counter].getElementsByTagName("option").length) {
          options.push(groups[optgroup_counter].getElementsByTagName("option")[option_counter]);
          option_counter++;
        }
        optgroup_counter++;
      }
      return options;
    };

    AbstractChosenOrder.getSelectionOrder = function(select, optgroups) {
      var chosen_options, chosen_ui, close_btn, opt, option, options, order, rel, _i, _len;
      if (typeof getDOMElement !== "undefined" && getDOMElement !== null) {
        select = getDOMElement(select);
      }
      order = [];
      if (!isValidMultipleSelectElement(select, optgroups)) {
        console.error(ERRORS.invalid_select_element.replace('{{function}}', 'getSelectionOrder'));
        return order;
      }
      chosen_ui = getChosenUIContainer(select);
      if (chosen_ui == null) {
        console.error(ERRORS.unreachable_chosen_container.replace('{{function}}', 'getSelectionOrder'));
        return order;
      }
      chosen_options = chosen_ui.querySelectorAll('.search-choice');
      for (_i = 0, _len = chosen_options.length; _i < _len; _i++) {
        opt = chosen_options[_i];
        close_btn = opt.querySelectorAll('.search-choice-close')[0];
        if (close_btn != null) {
          rel = close_btn.getAttribute(this.relAttributeName);
        }
        options = (optgroups ? option_selection(select) : Array.prototype.filter.call(select.childNodes, function(o) {
          return o.nodeName === "OPTION";
        }));
        option = options[rel];
        order.push(option.value);
      }
      return order;
    };

    AbstractChosenOrder.setSelectionOrder = function(select, order, force, optgroups) {
      var chosen_choices, chosen_options, chosen_ui, i, opt, option, rel, relAttributeName, tmp_select, _i, _len, _results;
      if (typeof getDOMElement !== "undefined" && getDOMElement !== null) {
        select = getDOMElement(select);
      }
      if (!isValidMultipleSelectElement(select)) {
        console.error(ERRORS.invalid_select_element.replace('{{function}}', 'setSelectionOrder'));
        return;
      }
      chosen_ui = getChosenUIContainer(select);
      if (chosen_ui == null) {
        console.error(ERRORS.unreachable_chosen_container.replace('{{function}}', 'setSelectionOrder'));
        return;
      }
      if (order instanceof Array) {
        order = order.map(Function.prototype.call, String.prototype.trim);
        if ((force != null) && force === true) {
          forceSelection.call(select, order);
        }
        _results = [];
        for (i = _i = 0, _len = order.length; _i < _len; i = ++_i) {
          opt = order[i];
          tmp_select = optgroups ? option_selection(select) : select;
          rel = Array.prototype.indexOf.call(tmp_select, select.querySelector("option[value=\"" + opt + "\"]"));
          chosen_options = chosen_ui.querySelectorAll('.search-choice');
          relAttributeName = this.relAttributeName;
          option = Array.prototype.filter.call(chosen_options, function(o) {
            return o.querySelector("a.search-choice-close[" + relAttributeName + "=\"" + rel + "\"]") != null;
          })[0];
          chosen_choices = chosen_ui.querySelector("ul.chosen-choices");
          _results.push(insertAt(option, i, chosen_ui.querySelector('ul.chosen-choices')));
        }
        return _results;
      } else {
        return console.error(ERRORS.invalid_selection_array.replace('{{function}}', 'setSelectionOrder'));
      }
    };

    return AbstractChosenOrder;

  })();

  Element.addMethods({
    getSelectionOrder: function(element, optgroup) {
      return ChosenOrder.getSelectionOrder(element, optgroup);
    },
    setSelectionOrder: function(element, order, force, optgroup) {
      return ChosenOrder.setSelectionOrder(element, order, force, optgroup);
    }
  });

  this.ChosenOrder = (function(_super) {
    __extends(ChosenOrder, _super);

    function ChosenOrder() {
      _ref = ChosenOrder.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ChosenOrder.relAttributeName = "rel";

    parent.searchChosenUIContainer = function(element) {
      return element.next(".chosen-container.chosen-container-multi");
    };

    parent.triggerEvent = function(target, event_name) {
      return Event.fire($(target), event_name);
    };

    return ChosenOrder;

  })(AbstractChosenOrder);

}).call(this);
